import asyncio
import logging
import re

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart

from dotenv import load_dotenv
import os

from db import fetch_unsent_links, mark_as_sent
from sender import link_parser

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ï–§–†–°–ë –ú–æ–Ω–∏—Ç–æ—Ä.\n"
        "–Ø –ø—É–±–ª–∏–∫—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ —Å –ï–§–†–°–ë –≤ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª.\n"
        f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å: {CHANNEL_ID}"
    )


def build_message(data: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è data.
    –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏ –≤ data:
    "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–í–∏–¥ —Ç–æ—Ä–≥–æ–≤", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¶–µ–Ω–∞",
    "–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–§–ò–û –¥–æ–ª–∂–Ω–∏–∫–∞", "–ò–ù–ù", "–°—Å—ã–ª–∫–∞".
    –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äì –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 10‚Äì15 —Å–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è
    description_words = data.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç').split()
    short_description = ' '.join(description_words[:15]) + ('...' if len(description_words) > 15 else '')

    # –ü–∞—Ä—Å–∏–Ω–≥ –§–ò–û –ê–£ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    au_info = data.get('–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    fio_au = au_info.split(' (–ò–ù–ù')[0] if ' (–ò–ù–ù' in au_info else au_info
    print(fio_au)
    match = re.search(r'–ò–ù–ù[:\s]*(\d+)', str(au_info))
    inn = match.group(1)

    message = (
        f"#{data.get('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n\n"
        f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {data.get('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üè∑Ô∏è –§–æ—Ä–º–∞—Ç —Ç–æ—Ä–≥–æ–≤: {data.get('–í–∏–¥ —Ç–æ—Ä–≥–æ–≤', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {short_description}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('–¶–µ–Ω–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"üë®‚Äçüíº –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π:\n"
        f"–§–ò–û: {fio_au}\n"
        f"–ò–ù–ù: {inn}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        f"E-mail: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
        f"üè¢ –î–æ–ª–∂–Ω–∏–∫:\n"
        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {data.get('–§–ò–û –¥–æ–ª–∂–Ω–∏–∫–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ò–ù–ù: {data.get('–ò–ù–ù', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ]({data.get('–°—Å—ã–ª–∫–∞', '#')})"
    )
    return message


async def send_message_to_group(message_text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CHANNEL_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    try:
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=message_text,
            disable_web_page_preview=True
        )
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def process_unsent_links():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã, –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—ã–π –ª–æ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å: (message_id, —Å—Å—ã–ª–∫–∞))
    unsent_generator = fetch_unsent_links(batch_size=100)
    if unsent_generator is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã.")
        return

    for record in unsent_generator:
        message_id, link = record
        print(f'–æ–±—Ä–∞–±–æ—Ç–∫–∞: {message_id}, {link}')
        try:
            lots = link_parser(link)
            if lots:
                for lot in lots:
                    message_text = build_message(lot)
                    await send_message_to_group(message_text)
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            mark_as_sent(message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {message_id} —Å —Å—Å—ã–ª–∫–æ–π {link}: {e}")

async def main():
    while True:
        try:
            await process_unsent_links()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(60)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        asyncio.run(bot.close())
