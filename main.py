import asyncio
import datetime
from logScript import logger
import re
from pprint import pprint

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from dotenv import load_dotenv
import os
import html

from db import fetch_unsent_links, mark_as_sent
from sender import link_parser

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ï–§–†–°–ë –ú–æ–Ω–∏—Ç–æ—Ä.\n"
        "–Ø –ø—É–±–ª–∏–∫—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ —Å –ï–§–†–°–ë –≤ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª.\n"
        f"–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å: {CHANNEL_ID}"
    )

def filter_messages_by_current_month(messages: list) -> list:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏" —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "%d.%m.%Y")
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –≥–æ–¥ –∏ –º–µ—Å—è—Ü —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–∫—É—â–∏–º.
    """
    current_date = datetime.datetime.now()
    filtered = []
    for msg in messages:
        pub_date_str = msg.get("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", None)
        if pub_date_str:
            try:
                pub_date = datetime.datetime.strptime(pub_date_str, "%d.%m.%Y")
                if pub_date.year == current_date.year and pub_date.month == current_date.month:
                    filtered.append(msg)
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                continue
    return filtered

def build_message(data: dict) -> str:
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 10‚Äì15 —Å–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è
    description_words = data.get('–û–ø–∏—Å–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç').split()
    short_description = ' '.join(description_words[:15]) + ('...' if len(description_words) > 15 else '')


    au_info = data.get('–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π', '').strip()
    if not au_info or au_info == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
        au_info = data.get('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').strip()

    if au_info and au_info != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
        fio_au = au_info.split(' (–ò–ù–ù')[0] if ' (–ò–ù–ù' in au_info else au_info
        match = re.search(r'–ò–ù–ù[:\s]*(\d+)', au_info)
        if match:
            inn = match.group(1)
        else:
            inn = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    else:
        fio_au = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        inn = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    message = (
        f"#{html.escape(data.get('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))}\n\n"
        f"üìÖ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {html.escape(data.get('–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'))}\n"
        f"üè∑Ô∏è <b>–§–æ—Ä–º–∞—Ç —Ç–æ—Ä–≥–æ–≤:</b> {html.escape(data.get('–í–∏–¥ —Ç–æ—Ä–≥–æ–≤', '–ù–µ —É–∫–∞–∑–∞–Ω'))}\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {html.escape(short_description)}\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {html.escape(data.get('–¶–µ–Ω–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'))}\n\n"
        f"üë®‚Äçüíº <b>–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π:</b>\n"
        f"–§–ò–û: {html.escape(fio_au)}\n"
        f"–ò–ù–ù: {html.escape(inn)}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        f"E-mail: {html.escape(data.get('E-mail', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}\n\n"
        f"üè¢ <b>–î–æ–ª–∂–Ω–∏–∫:</b>\n"
        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {html.escape(data.get('–§–ò–û –¥–æ–ª–∂–Ω–∏–∫–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
        f"–ò–ù–ù: {html.escape(data.get('–ò–ù–ù', '–ù–µ —É–∫–∞–∑–∞–Ω'))}\n\n"
        f"üîó <a href=\"{html.escape(data.get('–°—Å—ã–ª–∫–∞', '#'))}\">–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>"
    )
    return message


async def send_message_to_group(message_text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CHANNEL_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    try:
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=message_text,
            disable_web_page_preview=True
        )
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except TelegramBadRequest as e:
        error_msg = str(e)
        if "Too Many Requests" in error_msg and "retry after" in error_msg:
            # –ò—â–µ–º —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å
            m = re.search(r"retry after (\d+)", error_msg)
            if m:
                retry_after = int(m.group(1))
            else:
                retry_after = 10  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.error(f"Flood control: –∂–¥–µ–º {retry_after} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π")
            await asyncio.sleep(retry_after)
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            await send_message_to_group(message_text)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def process_unsent_links():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã, –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—ã–π –ª–æ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å: (message_id, —Å—Å—ã–ª–∫–∞))
    unsent_generator = fetch_unsent_links(batch_size=100)
    if unsent_generator is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã.")
        return

    for record in unsent_generator:
        message_id, link = record
        logger.info(f'–æ–±—Ä–∞–±–æ—Ç–∫–∞: {message_id}, {link}')
        try:
            messages = link_parser(link)
            messages = filter_messages_by_current_month(messages)
            pprint(messages)
            logger.info('\n\n\n')
            if messages:
                for msg  in messages:
                    message_text = build_message(msg)
                    await send_message_to_group(message_text)
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(1.5)
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                mark_as_sent(message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {message_id} —Å —Å—Å—ã–ª–∫–æ–π {link}: {e}")

async def main():
    while True:
        try:
            await process_unsent_links()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(60)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        asyncio.run(bot.close())
